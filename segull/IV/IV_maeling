import comedi
import time
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

##Data about the hall sensor KSY14, the inner resistance is 1.180 kOhms
#gmw 14. hall sensors

subdevr = 0 # subdevice for read channels
subdevw = 1 # subdevice for write channels
chanr = 0
chanw = 0
rngr = 0
rngw = 0 # only one possible range for outputs -10..10 Volts
aref = comedi.AREF_GROUND
# for output channels, range is 0..4095, zero is 2047.5
datazero = 2048
datawmax = 4095
hall_imp = 1180 #ohms

dev = comedi.comedi_open("/dev/comedi0")
#print(comedi.comedi_get_board_name(dev))  Get information about the daq card, current one is pci-6024E 
if dev is None:
    errno = comedi.comedi_errno()
    print('Error (%d) %s',errno, comedi.comedi_strerror(errno))



#Divide into steps
start=2048-4095/20
rang=2*4095/20
nvals = int(input('How many steps? '))
print(nvals)
nsteps = nvals - 1
lenstep = rang/(nsteps)
ctrvec = np.arange(nvals)
idealwriteval = ctrvec*lenstep+start #ideal case, unrounded
writeval = np.int_(np.around(idealwriteval)) #must write integer values
outvolt = -10 + 20*writeval/datawmax
outvoltstrg =[round(elem, 3) for elem in outvolt] # print only 3 decimals
current = outvolt/hall_imp
hallvoltlist = np.arange(nvals)

print(f'''
unrounded output value: {idealwriteval}
ideal output voltage: {outvoltstrg}
rounded output value: { writeval}
''')

for n, val in enumerate(writeval):
    retvalw = comedi.comedi_data_write(dev, subdevw, chanw, rngw, aref, int(val))
    retvalr, hallvolt = comedi.comedi_data_read(dev, subdevr, chanr, rngr, aref)
    hallvoltphys = -10 + hallvolt*20/4095
    print(f'''{n}, Output(Voltage, Value, Current): ({round(outvolt[n],5)} V, {writeval[n]}, {round(current[n],5)} A)
Return value from read:{retvalr}
Input(Hallvoltage, Value):          ({round(hallvoltphys,5)} V, {hallvolt})''')
    hallvoltlist[n] = hallvolt
    time.sleep(3)


retval = comedi.comedi_data_write(dev, subdevw, chanw, rngw, aref, datazero)
print('Resetting DAQ to zero: ', retval)

retval = comedi.comedi_get_maxdata(dev, subdevw, chanw)
print('write retval from maxdata: ', retval)

comedi.comedi_close(dev)


currentstart=(-10+start*20/4095)/hall_imp
hallvoltlist=hallvoltlist*20/4095-10
hallvoltarr=np.array(hallvoltlist)
currentarr=np.array(current).reshape((-1,1))
model=LinearRegression().fit(currentarr[1:],hallvoltarr[1:])
y=model.intercept_+currentarr*model.coef_[0]

print(f'''
The slope is: {model.coef_[0]} V/AT
''')

plt.plot(currentarr,hallvoltarr,'o')
plt.plot(currentarr,y)
plt.title('Hallspenna sem fall af straum')
plt.xlabel('Straumur [A]')
plt.ylabel('Hallspenna [V]')
plt.show()


# # retval = comedi.comedi_data_read(dev, subdevr, chanr, rngr, aref)
# retval = comedi.comedi_data_write(dev, subdevw, chanw, rngw, aref, data)
# print('write retval: ', retval)
# # physval = comedi.comedi_to_phys(data, [-10, 10], 4095)
# # print('this corresponds to: ', physval)
#print('retval from read :', inpt, ' Hall voltage: ', hallvolt, 'physical value: ',-10+hallvolt*20/4095,' V') 
#for n in range(len(vec2p)):
#    val = vec2p[n]
#    retval = comedi.comedi_data_write(dev, subdevw, chanw, rngw, aref, int(val))
#    print('step: ', n, ' : ', 'value written: ', val, 'physical value: ', -10+val*20/4095, 'V')
#    time.sleep(1.5)
#    retval, hallvolt = comedi.comedi_data_read(dev, subdevr, chanr, rngr, aref)
#    print('retval from read :', retval, '  Hall voltage: ', hallvolt, ' physical value: ', -10+hallvolt*20/4095, 'V')
